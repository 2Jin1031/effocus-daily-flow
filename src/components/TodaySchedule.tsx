
import React, { useState } from 'react';
import { ScheduleItem } from '@/types';
import { locationTodos } from '@/data/mockData';

interface TodayScheduleProps {
  schedules: ScheduleItem[];
}

const TodaySchedule = ({ schedules }: TodayScheduleProps) => {
  const [toggledTodos, setToggledTodos] = useState<{[key: string]: boolean}>({});
  
  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
  };
  
  const isTimePassed = (timeString: string) => {
    const currentTime = getCurrentTime();
    return timeString < currentTime;
  };

  const getTimeRemaining = (startTime: string, endTime: string) => {
    const now = new Date();
    const currentMinutes = now.getHours() * 60 + now.getMinutes();
    
    const [startHour, startMin] = startTime.split(':').map(Number);
    const [endHour, endMin] = endTime.split(':').map(Number);
    
    const startMinutes = startHour * 60 + startMin;
    const endMinutes = endHour * 60 + endMin;
    
    if (currentMinutes < startMinutes) {
      const remaining = startMinutes - currentMinutes;
      const hours = Math.floor(remaining / 60);
      const mins = remaining % 60;
      return hours > 0 ? `${hours}시간 ${mins}분 후 시작` : `${mins}분 후 시작`;
    } else if (currentMinutes >= startMinutes && currentMinutes < endMinutes) {
      const remaining = endMinutes - currentMinutes;
      const hours = Math.floor(remaining / 60);
      const mins = remaining % 60;
      return hours > 0 ? `${hours}시간 ${mins}분 남음` : `${mins}분 남음`;
    }
    return null;
  };
  
  const getRelatedTodos = (location?: string) => {
    if (!location) return [];
    return locationTodos.filter(todo => 
      todo.location.toLowerCase() === location.toLowerCase()
    );
  };
  
  const toggleTodos = (scheduleId: string) => {
    setToggledTodos(prev => ({
      ...prev,
      [scheduleId]: !prev[scheduleId]
    }));
  };

  const getCurrentTimeInMinutes = () => {
    const now = new Date();
    return now.getHours() * 60 + now.getMinutes();
  };

  const isScheduleInFuture = (endTime: string) => {
    const [endHour, endMin] = endTime.split(':').map(Number);
    const endTimeInMinutes = endHour * 60 + endMin;
    return endTimeInMinutes > getCurrentTimeInMinutes();
  };

  // Filter out past schedules completely
  const futureSchedules = schedules.filter(schedule => isScheduleInFuture(schedule.endTime));

  return (
    <div className="px-6 py-4">
      <h2 className="text-lg font-bold text-gray-900 mb-4">지금부터의 일정</h2>
      <div className="space-y-4">
        <div className="relative">
          {/* Time axis */}
          <div className="absolute left-0 top-0 w-16 h-full">
            {Array.from({length: 24}, (_, i) => (
              <div key={i} className="h-16 border-b border-gray-100 text-xs text-gray-400 px-2 py-1">
                {String(i).padStart(2, '0')}:00
              </div>
            ))}
          </div>
          
          {/* Schedule blocks */}
          <div className="ml-20 relative">
            {futureSchedules.map((schedule, index) => {
              const relatedTodos = getRelatedTodos(schedule.location);
              const isPast = isTimePassed(schedule.endTime);
              const showTodos = toggledTodos[schedule.id];
              const timeRemaining = getTimeRemaining(schedule.startTime, schedule.endTime);
              
              const [startHour, startMin] = schedule.startTime.split(':').map(Number);
              const [endHour, endMin] = schedule.endTime.split(':').map(Number);
              const top = (startHour + startMin/60) * 64; // 64px per hour
              const height = ((endHour + endMin/60) - (startHour + startMin/60)) * 64;
              
              const getBlockColor = (category: string, isAuto: boolean) => {
                if (category === 'travel') return 'bg-gray-300';
                if (category === 'course') return 'bg-orange-400';
                if (category === 'meal') return 'bg-green-400';
                return 'bg-purple-400';
              };
              
              const isTravel = schedule.category === 'travel';
              
              return (
                <div key={schedule.id}>
                  <div 
                    className={`absolute w-full rounded-lg p-3 shadow-sm border-l-4 transition-all duration-300 ${
                      getBlockColor(schedule.category, schedule.isAutoGenerated || false)
                    } ${isPast ? 'opacity-50' : ''}`}
                    style={{ 
                      top: `${top}px`, 
                      height: `${Math.max(height, 48)}px`,
                      zIndex: isTravel ? 1 : 2
                    }}
                  >
                    <div className="flex items-center justify-between h-full">
                      <div className="flex items-center space-x-2 flex-1 min-w-0">
                        <h3 className={`font-medium text-white truncate text-sm ${
                          isPast ? 'line-through' : ''
                        }`}>
                          {schedule.title}
                        </h3>
                        {schedule.isAutoGenerated && !isPast && (
                          <span className="text-xs bg-white/20 px-1 py-0.5 rounded text-white flex-shrink-0">자동</span>
                        )}
                        {isTravel && schedule.travelTime && (
                          <span className="text-xs bg-white/20 px-1 py-0.5 rounded text-white flex-shrink-0">{schedule.travelTime}분</span>
                        )}
                      </div>
                      
                      {!isTravel && (
                        <div className="flex items-center space-x-2 flex-shrink-0">
                          <span className="text-xs text-white/80">
                            {schedule.startTime}~{schedule.endTime}
                          </span>
                          {relatedTodos.length > 0 && (
                            <button
                              onClick={() => toggleTodos(schedule.id)}
                              className="text-white/90 text-xs hover:text-white bg-white/20 px-2 py-1 rounded"
                            >
                              TODO ({relatedTodos.length})
                            </button>
                          )}
                        </div>
                      )}
                    </div>
                    
                    {!isTravel && timeRemaining && !isPast && (
                      <p className="text-xs mt-1 text-white/90 font-medium">
                        {timeRemaining}
                      </p>
                    )}
                    
                    {!isTravel && schedule.distance && (
                      <p className="text-xs mt-1 text-white/80">
                        {schedule.distance}
                      </p>
                    )}
                  </div>
                  
                  {!isTravel && showTodos && relatedTodos.length > 0 && (
                    <div 
                      className="absolute w-full mt-2 space-y-1 z-10"
                      style={{ top: `${top + Math.max(height, 48) + 8}px` }}
                    >
                      {relatedTodos.map((todo) => (
                        <div key={todo.id} className="bg-blue-50 p-2 rounded border border-blue-100 shadow-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-blue-700 text-xs">{todo.task}</span>
                            <div className={`w-3 h-3 rounded-full border ${
                              todo.isCompleted 
                                ? 'bg-blue-500 border-blue-500' 
                                : 'border-blue-300'
                            }`}>
                              {todo.isCompleted && (
                                <div className="w-full h-full flex items-center justify-center">
                                  <div className="w-1 h-1 bg-white rounded-full"></div>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TodaySchedule;
